obj_safeg_intsched
==================

1.- Introduction
    ------------

This directory contains an application to test the integrated scheduling
framework. TrustZone is configured as follows:

    - Trust: ASP, Non-Trust: ASP

Trust ASP contains the following tasks:

    - Priority  4: Main task (initializes the system and finishes)
    - Priority  4: Task 1 (T=100ms C=10ms)
    - Priority  6: Latency Manager
    - Priority  7: LTASK0 (Repl_Period=150ms Budget=15ms)
    - Priority  8: Task 2 (T=200ms C=30ms)
    - Priority  9: LTASK1 (Repl_Period=300ms Budget=25ms)
    - Priority 10: Task 3 (T=200ms C=80ms)
    - Priority 11: BTASK (background priority)

Non-Trust ASP contains the following tasks:

    - Priority  4: Main task (initializes the system and triggers trace dump)
    - Priority  5: NT_Task 1 (T=150ms C=10ms)
    - Priority  5: Dummy tasks 0~7 (never activated, trick for tracing)
    - Priority  8: NT_Task 2 (T=300ms C=20ms)
    - Priority 12: NT_Task 3 (U=100%)

The assignment of Non-Trust activities to LTASKs is contained in the
LTASK management data at lowlat.c. In this application the assignment is
as follows:

    - LTASK0
        => Non-Trust Timer interrupt
        => Non-Trust Tasks with priority 0~5 (NT_Task 1)
    - LTASK1
        => Non-Trust Tasks with priority 6~11 (NT_Task 2)
    - BTASK
        => Remaining tasks (NT_Task 3)

2.- Build and run
    --------------

This example is compiled as follows:

	- make OBJ=obj_safeg_intsched NONTRUST=asp clean
	- make OBJ=obj_safeg_intsched NONTRUST=asp

Then, load the resulting binaries (trust.bin, non-trust.bin and safeg.bin) to
the PB1176 board (see the safeg/doc/user.txt). After a few seconds of
processing, the application will finish and dump two logs, one for each world.
Copy the log from the console into two files:

	- trust.log
	- nontrust.log

3.- Display the logs with TLV
    -------------------------

In order to display the log of both worlds in TOPPERS/TLV we will combine
them with a script and use an multicore resource file that simulates the
existance of two virtual processors. The combined log (combined.log) is
generated with:

	- python ./tlv-unifier/unifier.py

An example is provided in the tlv-unifier directory. The combined resource
file must be generated by combining the trust and non_trust kernel.res files.
An example for this application is included in:

	- ./tlv-unifier/combined.res

The last step is to open TLV (use a virtual machine to run Windows) and
input the combined.log and combined.res files to generate the execution
trace graphics.
